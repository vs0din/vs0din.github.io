{"version":3,"sources":["actions/index.js","components/Header/Header.js","components/Post/Post.js","components/PostsList/PostsList.js","containers/PlusButton/PlusButton.js","components/Screens/PostsScreen.js","components/Comment/Comment.js","components/CommentsList/CommentsList.js","containers/CommentAdd/CommentAdd.js","components/Screens/CommentsScreen.js","containers/PostAdd/PostAdd.js","components/Screens/ItemsAddScreen.js","App.js","serviceWorker.js","reducers/comments.js","reducers/visibleScreen.js","reducers/posts.js","reducers/index.js","index.js","localStorage.js"],"names":["addComment","text","type","id","v4","addPost","title","screenVisibility","choice","PostsScreenIsVisible","ItemsAddScreenIsVisible","CommentsScreenIsVisible","Header","_this","this","react_default","a","createElement","className","props","visibleScreen","src","image","alt","width","height","onClick","changeScreenVisibility","subTitle","Component","connect","state","dispatch","Post","commentsCount","PostsList","posts","map","post","components_Post_Post","key","PlusButton","PostsScreen","Fragment","components_Header_Header","containers_PlusButton_PlusButton","components_PostsList_PostsList","Comment","commentIconPath","titleText","commentText","comments","comment","components_Comment_Comment","userPic","CommentAdd","input","ref","node","placeholder","add","el","value","CommentsScreen","components_CommentsList_CommentsList","containers_CommentAdd_CommentAdd","PostAdd","ItemsAddScreen","containers_PostAdd_PostAdd","App","console","log","Screens_PostsScreen","Screens_ItemsAddScreen","Screens_CommentsScreen","Boolean","window","location","hostname","match","initialComments","postId","arguments","length","undefined","action","Object","toConsumableArray","concat","initialState","objectSpread","initialPosts","sayer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","reducer","subscribe","throttle","stringify","setItem","saveState","getState","app","es","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b9f5c28.chunk.js","sourcesContent":["import { v4 } from 'node-uuid'\r\n\r\nexport const addComment = (text) => ({\r\n\ttype: 'ADD_COMMENT',\r\n\tid: v4(),\r\n\ttext\r\n});\r\n\r\nexport const addPost = (title) => ({\r\n\ttype: 'ADD_POST',\r\n\tid: v4(),\r\n\ttitle\r\n});\r\n\r\n\r\nexport const screenVisibility = (choice) => ({\r\n  type: 'CHANGE_SCREEN_VISIBILITY',\r\n  PostsScreenIsVisible: choice.PostsScreenIsVisible,\r\n  ItemsAddScreenIsVisible: choice.ItemsAddScreenIsVisible,\r\n  CommentsScreenIsVisible: choice.CommentsScreenIsVisible\r\n});\r\n","import React, {Component} from 'react'\r\nimport './Header.css';\r\nimport {connect} from 'react-redux'\r\nimport {screenVisibility} from \"../../actions\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n\r\n\r\n  return (\r\n      <div className={'Header'}>\r\n        <div className={'Header-img__place ' +\r\n          (this.props.visibleScreen.PostsScreenIsVisible ? 'hidden' : '')\r\n        }>\r\n          <img className={'Header-img_icon'}\r\n\r\n               src={this.props.image}\r\n               alt=\"\" width=\"40\" height=\"40\"\r\n               onClick={() => this.props.changeScreenVisibility()}\r\n          />\r\n        </div>\r\n\r\n        <div className={'Header-top__title'}>\r\n          <h2 className={this.props.visibleScreen.PostsScreenIsVisible ? 'bigger' : ''}> {this.props.title} </h2>\r\n          <div>\r\n            <span className={this.props.visibleScreen.PostsScreenIsVisible ? 'bigger' : ''}>{this.props.subTitle}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n  );\r\n               }\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    visibleScreen: state.visibleScreen\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    changeScreenVisibility: () => {\r\n      dispatch(screenVisibility({\r\n        PostsScreenIsVisible: true,\r\n        ItemsAddScreenIsVisible: false,\r\n        CommentsScreenIsVisible: false\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n\r\n","import React from 'react'\r\nimport './Post.css';\r\n\r\nconst Post = (props) => {\r\n\r\n    // if (props.commentsCount) {\r\n    //\r\n    // }\r\n\r\n    return (\r\n        <div className=\"Post\">\r\n            <div className=\"row\">\r\n                <div className=\"col-xs-12\">\r\n                    <div className=\"input-group input-group-lg\">\r\n                        <span className=\"Post__title\">{props.title}</span>\r\n                        <div className=\"input-group-btn\">\r\n                            <span className=\"input-group Post__commentsCount noselect\">{props.commentsCount}</span>\r\n                            {/*<button data-text=\"Add new\" type=\"button\" className=\"btn Post__delete\">Delete</button>*/}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Post;","import React, {Component} from 'react'\r\nimport './PostsList.css';\r\nimport {connect} from 'react-redux'\r\nimport Post from '../Post/Post'\r\nimport {screenVisibility} from \"../../actions\";\r\n\r\nclass PostsList extends Component {\r\n  render() {\r\n\r\n    return (\r\n        <div className=\"PostList row\"\r\n             onClick={() => this.props.changeScreenVisibility()}\r\n\t\t\t\t>\r\n          {\r\n          \tthis.props.posts.map(post =>\r\n              <Post\r\n\r\n                  key={post.id}\r\n                  title={post.title}\r\n                  commentsCount={post.commentsCount}\r\n              />\r\n\t\t\t\t\t\t)\r\n          }\r\n        </div>\r\n    );\r\n  }\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tposts: state.posts,\r\n    visibleScreen: state.visibleScreen\r\n\t}\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    changeScreenVisibility: () => {\r\n      dispatch(screenVisibility({\r\n        PostsScreenIsVisible: false,\r\n        ItemsAddScreenIsVisible: false,\r\n        CommentsScreenIsVisible: true\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsList);","import React, {Component} from 'react'\r\nimport './PlusButton.css'\r\nimport {connect} from 'react-redux'\r\nimport {screenVisibility} from \"../../actions\";\r\n\r\nclass PlusButton extends Component {\r\n  render() {\r\n    return (\r\n        <div className={'PlusButton-img__place'}>\r\n          <img onClick={() => this.props.changeScreenVisibility()}\r\n               className={'PlusButton-img_icon'}\r\n               src={this.props.image}\r\n               alt=\"\" width=\"40\" height=\"40\"/>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    changeScreenVisibility: () => {\r\n      dispatch(screenVisibility({\r\n        PostsScreenIsVisible: false,\r\n        ItemsAddScreenIsVisible: true,\r\n        CommentsScreenIsVisible: false\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlusButton)","import React from 'react';\r\nimport Header from '../../components/Header/Header'\r\nimport PostsList from \"../../components/PostsList/PostsList\";\r\nimport PlusButton from '../../containers/PlusButton/PlusButton'\r\n\r\nconst PostsScreen = (props) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Header\r\n\t\t\t\ttitle={'Sayer'}\r\n\t\t\t\tsubTitle={'World\\'s most used time waster'}\r\n\t\t\t\timage={process.env.PUBLIC_URL + '/image/arr-left.png'}\r\n\t\t\t/>\r\n\r\n\t\t\t<PlusButton\r\n\t\t\t\timage={process.env.PUBLIC_URL + '/image/plus.png'}\r\n\t\t\t/>\r\n      <PostsList/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default PostsScreen","import React from 'react';\r\nimport './Comment.css';\r\n\r\nconst Comment = (props) => {\r\n\treturn (\r\n\r\n\t\t<div className=\"Comments\">\r\n\t\t\t<div className=\"media-left\">\r\n\t\t\t\t<img src={props.commentIconPath} className=\"Comments__icon media-object avatar\" alt=\"not loaded\"\r\n\t\t\t\t\t\t title={props.titleText || \"< stranger >\"}/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"media-body\">\r\n\t\t\t\t<h6 className=\"Comments__text\">{props.commentText}</h6>\r\n\t\t\t</div>\r\n\t\t\t<hr className=\"divider\"/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Comment","import React from 'react';\r\nimport './CommentsList.css';\r\nimport {connect} from 'react-redux'\r\nimport Comment from '../Comment/Comment'\r\n\r\nconst CommentsList = (props) => {\r\n\r\n\treturn (\r\n\t\t<div className={'CommentsList row'}>\r\n\t\t\t{props.comments.map(comment =>\r\n\t\t\t\t<Comment\r\n\t\t\t\t\tkey={comment.id}\r\n\t\t\t\t\tcommentIconPath={comment.userPic}\r\n\t\t\t\t\tcommentText={comment.text}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tcomments: state.comments\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps)(CommentsList)","import React, {Component} from 'react';\r\nimport './CommentAdd.css';\r\nimport {connect} from 'react-redux'\r\nimport {addComment} from '../../actions'\r\n\r\nclass CommentAdd extends Component {\r\n  render() {\r\n    let input;\r\n\r\n    return (\r\n        <div className=\"CommentAdd row\">\r\n          <div className=\"col-xs-12\">\r\n            <div className=\"input-group input-group-lg\">\r\n              <input ref={node => {\r\n                input = node\r\n              }} type=\"text\" className=\"form-control\" placeholder=\"New comment goes here...\"/>\r\n              <div className=\"input-group-btn\">\r\n                <img onClick={() => this.props.add(input)} className=\"CommentAdd-add\" alt={\"\"}\r\n                     src={process.env.PUBLIC_URL + '/image/arr-right.png'}/>\r\n                {/*<img onClick={ () => dispatch(addComment(input.value)) } className=\"CommentAdd-add\" alt={\"\"} src={process.env.PUBLIC_URL + '/image/arr-right.png'}></img>*/}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    add: (el) => {\r\n      dispatch(addComment(el.value));\r\n      el.value = '';\r\n\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentAdd)","import React from 'react';\r\nimport Header from '../../components/Header/Header'\r\nimport CommentsList from '../../components/CommentsList/CommentsList'\r\nimport CommentAdd from '../../containers/CommentAdd/CommentAdd'\r\n\r\nconst CommentsScreen = (props) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Header\r\n\t\t\t\ttitle={'First Item with cudsaf dfasd fasdf asdfasdstomized long title'}\r\n\t\t\t\tsubTitle={'dsafdsf dsakjflkjsahkjf hakjsdlkdj'}\r\n\t\t\t\timage={process.env.PUBLIC_URL + '/image/arr-left.png'}\r\n\t\t\t/>\r\n\t\t\t<CommentsList/>\r\n\t\t\t<CommentAdd/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default CommentsScreen","import React, {Component} from 'react';\r\nimport './PostAdd.css';\r\nimport {connect} from 'react-redux'\r\nimport {addPost} from '../../actions'\r\nimport {screenVisibility} from \"../../actions\";\r\n\r\nclass PostAdd extends Component {\r\n\trender() {\r\n\t\tlet input;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"ItemAdd row\">\r\n\t\t\t\t<div className=\"col-xs-12\">\r\n\t\t\t\t\t<div className=\"input-group input-group-lg\">\r\n\t\t\t\t\t\t<input ref={node => {\r\n\t\t\t\t\t\t\tinput = node\r\n\t\t\t\t\t\t}} type=\"text\" className=\"form-control BotBorder\" placeholder=\"New item title...\"/>\r\n\t\t\t\t\t\t<div className=\"input-group-btn\">\r\n\t\t\t\t\t\t\t<img onClick={() => this.props.add(input)} className=\"ItemAdd-add\" alt={\"\"}\r\n\t\t\t\t\t\t\t\t\t src={process.env.PUBLIC_URL + '/image/arr-right.png'}/></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {}\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n\t\tadd: (el) => {\r\n\t\t\tdispatch(addPost(el.value));\r\n\t\t\tel.value = '';\r\n      // Aaaa111!!! - have to refactor\r\n\t\t\tdispatch(screenVisibility({\r\n        PostsScreenIsVisible: true,\r\n        ItemsAddScreenIsVisible: false,\r\n        CommentsScreenIsVisible: false\r\n      }));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostAdd)","import React from 'react';\r\nimport Header from '../../components/Header/Header'\r\nimport ItemAdd from '../../containers/PostAdd/PostAdd'\r\n\r\nconst ItemsAddScreen = (props) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Header\r\n\t\t\t\ttitle={'Create new item'}\r\n\t\t\t\timage={process.env.PUBLIC_URL + '/image/arr-left.png'}\r\n\t\t\t/>\r\n\t\t\t<ItemAdd/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default ItemsAddScreen","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport PostsScreen from './components/Screens/PostsScreen'\r\nimport CommentsScreen from './components/Screens/CommentsScreen'\r\nimport ItemsAddScreen from './components/Screens/ItemsAddScreen'\r\nimport {connect} from 'react-redux'\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n\r\n    console.log(\"%cTo reload app - use localStorage.removeItem('state')\", \"color: #0f861f; font-size:18px;font-variant: small-caps\");\r\n    return <div className=\"container\">\r\n\r\n      <div className={!this.props.visibleScreen.PostsScreenIsVisible ? 'hidden' : ''}>\r\n        <PostsScreen />\r\n      </div>\r\n      <div className={!this.props.visibleScreen.ItemsAddScreenIsVisible ? 'hidden' : ''}>\r\n        <ItemsAddScreen/>\r\n      </div>\r\n      <div className={!this.props.visibleScreen.CommentsScreenIsVisible ? 'hidden' : ''}>\r\n        <CommentsScreen/>\r\n      </div>\r\n\r\n    </div>;\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    visibleScreen: state.visibleScreen\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nconst initialComments =\r\n      [\r\n        {\r\n          \"id\": 1,\r\n          \"postId\": 1,\r\n          \"userPic\": \"http://icons.iconarchive.com/icons/webalys/kameleon.pics/256/Man-16-icon.png\",\r\n          \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tristique luctus enim, sed elementum neque venenatis in. Nullam lobortis ex a lectus blandit malesuada. Nam ac felis id dolor pharetra rutrum. Cras vitae fermentum ex. Vivamus aliquam egestas orci, sed porttitor nisi malesuada rutrum.\"\r\n        },\r\n        {\r\n          \"id\": 2,\r\n          \"postId\": 1,\r\n          \"userPic\": \"http://icons.iconarchive.com/icons/webalys/kameleon.pics/256/Boss-5-icon.png\",\r\n          \"text\": \"Maecenas eu sagittis tellus. Nam facilisis felis quis tellus eleifend congue. Aliquam feugiat velit leo, vitae faucibus arcu eleifend a. Proin in odio erat. Pellentesque vel justo malesuada ante pulvinar malesuada a quis lorem. Donec magna dui, egestas eu tincidunt vel, lacinia cursus nibh. Integer non nulla eget diam varius rhoncus nec at tellus. Nam porttitor condimentum diam, eu porta mauris finibus eget.\"\r\n        },\r\n        {\r\n          \"id\": 3,\r\n          \"postId\": 1,\r\n          \"userPic\": \"http://icons.iconarchive.com/icons/webalys/kameleon.pics/256/Woman-9-icon.png\",\r\n          \"text\": \"Suspendisse at erat tincidunt nunc euismod lobortis et et urna. Ut nulla tellus, eleifend vitae ultrices nec, fringilla et ex. Integer a odio eu velit dignissim ullamcorper. Praesent nec laoreet turpis, ut efficitur felis. Donec sodales sit amet tellus nec dictum. Donec quis sollicitudin nisi. Vivamus risus ex, rutrum eu venenatis id, egestas eu mi. Aliquam massa ligula, scelerisque vel nisl non, venenatis fringilla dui. Suspendisse vitae tincidunt mi. Morbi congue, tellus in fermentum ornare, elit justo ultrices lorem, eget bibendum nunc enim a lorem. Cras hendrerit non ipsum non fermentum. Nunc bibendum turpis mauris, vitae malesuada lorem posuere in. Mauris congue purus nulla, non pharetra lectus venenatis at. Fusce ultricies lobortis purus eu gravida. Proin pellentesque nec ante eget euismod. Nullam ultrices quis nisi sit amet porttitor.\"\r\n        }\r\n      ]\r\n\r\nconst comment = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_COMMENT':\r\n      return {\r\n        id: action.id,\r\n        text: action.text,\r\n        userPic: \"https://cdn.iconscout.com/icon/free/png-256/avatar-375-456327.png\"\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst comments = (state = initialComments, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_COMMENT':\r\n      return [\r\n        ...state,\r\n        comment(undefined, action)\r\n      ]\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default comments","const initialState = {\r\n\tPostsScreenIsVisible: true,\r\n\tItemsAddScreenIsVisible: false,\r\n\tCommentsScreenIsVisible: false\r\n}\r\n\r\nconst visibleScreen = (state = initialState, action) => {\r\n  switch ( action.type ) {\r\n\t\tcase 'CHANGE_SCREEN_VISIBILITY':\r\n      return {\r\n      \t...state,\r\n\t\t\t\tPostsScreenIsVisible: action.PostsScreenIsVisible,\r\n\t\t\t\tItemsAddScreenIsVisible: action.ItemsAddScreenIsVisible,\r\n\t\t\t\tCommentsScreenIsVisible: action.CommentsScreenIsVisible\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default visibleScreen","\r\nconst initialPosts =\r\n\t[\r\n\t\t{\r\n\t\t\t\"id\": 1,\r\n\t\t\t\"title\": \"First item with customize\",\r\n\t\t\t\"commentsCount\": 3\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": 2,\r\n\t\t\t\"title\": \"Second Item\",\r\n\t\t\t\"commentsCount\": 0\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": 3,\r\n\t\t\t\"title\": \"Third Item(short one)\",\r\n\t\t\t\"commentsCount\": 0\r\n\t\t}\r\n\t];\r\n\r\nconst post = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'ADD_POST':\r\n\t\t\treturn {\r\n\t\t\t\tid: action.id,\r\n\t\t\t\ttitle: action.title,\r\n\t\t\t\tcommentsCount: 0\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nconst posts = (state = initialPosts, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'ADD_POST':\r\n\t\t\treturn [\r\n\t\t\t\t...state,\r\n\t\t\t\tpost(undefined, action)\r\n\t\t\t]\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default posts","import { combineReducers } from 'redux'\r\nimport comments from './comments'\r\nimport visibleScreen from './visibleScreen'\r\nimport posts from './posts'\r\n\r\nconst sayer = combineReducers({\r\n  comments,\r\n  visibleScreen,\r\n  posts\r\n})\r\n\r\nexport default sayer\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, compose } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport { loadState, saveState } from './localStorage'\r\nimport reducer from './reducers'\r\nimport throttle from 'lodash/throttle'\r\n\r\nconst composeEnhancers =\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n          // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n        }) : compose;\r\n\r\nconst persistedState = loadState()\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    persistedState,\r\n    composeEnhancers(),\r\n);\r\n\r\nstore.subscribe(throttle(() => {\r\n  saveState(store.getState());\r\n}, 1000 ));\r\n\r\n\r\nconst app = (\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state');\r\n    if(serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state) => {\r\n  //delete state.visibleScreen; // should we save screenvisibility?\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('state', serializedState)\r\n  } catch (err) {\r\n    // ----\r\n  }\r\n}\r\n\r\n"],"sourceRoot":""}