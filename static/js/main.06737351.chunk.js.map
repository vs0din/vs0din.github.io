{"version":3,"sources":["actions/index.js","components/Header/Header.js","components/Post/Post.js","components/PostsList/PostsList.js","containers/PlusButton/PlusButton.js","components/Screens/PostsScreen.js","components/Comment/Comment.js","components/CommentsList/CommentsList.js","containers/CommentAdd/CommentAdd.js","components/Screens/CommentsScreen.js","containers/PostAdd/PostAdd.js","components/Screens/PostAddScreen.js","App.js","serviceWorker.js","reducers/comments.js","reducers/visibleScreen.js","reducers/posts.js","reducers/settings.js","reducers/index.js","index.js","localStorage.js"],"names":["addComment","text","currPostId","type","id","v4","addPost","title","screenVisibility","choice","PostsScreenIsVisible","PostAddScreenIsVisible","CommentsScreenIsVisible","changeCurrPostId","changeCurrPostTitle","currPostTitle","Header","localStorage","removeItem","window","location","reload","curScreen","_this","this","props","visibleScreen","react_default","a","createElement","className","style","display","src","image","alt","width","height","onClick","changeScreenVisibility","subTitle","_refreshPage","Component","connect","state","dispatch","posts","settings","comments","delPost","deletePost","postId","elPostDelPlace","commentsCount","filter","c","length","mouseOver","classList","remove","onMouseOut","add","onMouseOver","ref","node","PostsList","el","listEl","map","post","components_Post_Post","key","PlusButton","PostsScreen","components_Header_Header","components_PostsList_PostsList","containers_PlusButton_PlusButton","Comment","commentIconPath","titleText","commentText","CommentsList","scrollTop","scrollHeight","comment","components_Comment_Comment","userPic","CommentAdd","handleKeyPress","event","newComment","_this2","autoFocus","onKeyPress","placeholder","value","components_CommentsList_CommentsList","containers_CommentAdd_CommentAdd","PostAdd","newPost","PostAddScreen","containers_PostAdd_PostAdd","App","console","log","Screens_PostsScreen","Screens_PostAddScreen","components_Screens_CommentsScreen","Boolean","hostname","match","initialComments","arguments","undefined","action","Object","toConsumableArray","concat","initialState","objectSpread","initialPosts","sayer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistedState","serializedState","getItem","JSON","parse","err","loadState","store","createStore","reducer","subscribe","throttle","stringify","setItem","saveState","getState","app","es","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qhBAEaA,EAAa,SAACC,EAAMC,GAAP,MAAuB,CAChDC,KAAM,cACNC,GAAIC,eACJJ,OACAC,eAGYI,EAAU,SAACC,GAAD,MAAY,CAClCJ,KAAM,WACNC,GAAIC,eACJE,UAIYC,EAAmB,SAACC,GAAD,MAAa,CAC3CN,KAAM,2BACNO,qBAAsBD,EAAOC,qBAC7BC,uBAAwBF,EAAOE,uBAC/BC,wBAAyBH,EAAOG,0BAGrBC,EAAmB,SAACJ,GAAD,MAAa,CAC5CN,KAAM,sBACND,WAAYO,IAGAK,EAAsB,SAACL,GAAD,MAAa,CAC9CN,KAAM,yBACNY,cAAeN,ICzBXO,yLAEFC,aAAaC,WAAW,SACxBC,OAAOC,SAASC,0CAGT,IACHC,EADGC,EAAAC,KAEP,QAAQ,GACN,KAAMA,KAAKC,MAAMC,cAAchB,qBAC7BY,EAAY,WACZ,MACF,KAAME,KAAKC,MAAMC,cAAcd,wBAC7BU,EAAY,eACZ,MACF,KAAME,KAAKC,MAAMC,cAAcf,uBAC7BW,EAAY,UACZ,MACF,QACEA,EAAY,WAGhB,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,gBAAiBC,MAAO,CAACC,QAAW,aAElDL,EAAAC,EAAAC,cAAA,OAAKC,UAAW,gBAAiBC,MAAO,CAACC,QAAW,aAClDL,EAAAC,EAAAC,cAAA,OAAKC,UAAW,qBAAuBR,GAGrCK,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBAEXG,IAAKT,KAAKC,MAAMS,MAChBC,IAAI,GAAGC,MAAM,KAAKC,OAAO,KACzBC,QAAS,kBAAMf,EAAKE,MAAMc,6BAIjCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAW,qBACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAWR,GAAf,IAA4BE,KAAKC,MAAMlB,MAAvC,KAEAoB,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,QACIC,UAAWR,GAAYE,KAAKC,MAAMe,aAMxCb,EAAAC,EAAAC,cAAA,OAAKC,UAAW,eACXQ,QAAUd,KAAKiB,cAClBd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACM,OAAS,OAAOD,MAAQ,QAASH,IAAI,oEAAoEE,IAAI,gBApDrHO,aAqFNC,kBAnBf,SAAyBC,GACvB,MAAO,CACLlB,cAAekB,EAAMlB,gBAIzB,SAA4BmB,GAC1B,MAAO,CACLN,uBAAwB,WACtBM,EAASrC,EAAiB,CACxBE,sBAAsB,EACtBC,wBAAwB,EACxBC,yBAAyB,QAOlB+B,CAA6C3B,GCL7C2B,6BA3BS,SAACC,GACvB,MAAO,CACLE,MAAOF,EAAME,MACbpB,cAAekB,EAAMlB,cACrBqB,SAAUH,EAAMG,SAChBC,SAAUJ,EAAMI,WAIO,SAACH,GAC1B,MAAO,CACLhC,iBAAkB,SAACX,EAAYa,GAC7B8B,EAAShC,EAAiBX,IAC1B2C,EAAS/B,EAAoBC,IAC7B8B,EAASrC,EAAiB,CACxBE,sBAAsB,EACtBC,wBAAwB,EACxBC,yBAAyB,MAG7BqC,QAAS,SAAC7C,GACRyC,EF9CoB,SAACzC,GAAD,MAAS,CACjCD,KAAM,cACNC,ME4Ca8C,CAAW9C,IACpByC,EF1C6C,CACjD1C,KAAM,4BACNgD,OEwCoC/C,OAKvBuC,CAhFF,SAAClB,GAEZ,IAAI2B,EACAC,EAAgB5B,EAAMuB,SAASM,OAAO,SAACC,GAAD,OACtCA,EAAEJ,SAAW1B,EAAMrB,KACpBoD,OAMGC,EAAY,WAChBL,EAAeM,UAAUC,OAAO,cAGlC,OACIhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACV8B,WAAY,WAVrBR,EAAeM,UAAUG,IAAI,cAWpBC,YAAa,kBAAML,MAEtB9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACVQ,QAAS,kBAAMmB,MAClBhC,EAAMlB,OAGRoB,EAAAC,EAAAC,cAAA,OAAKkC,IAAK,SAAAC,GACR,OAAQZ,EAAiBY,GAEtBlC,UAAU,qCACVQ,QAAS,kBAAMb,EAAMwB,QAAQxB,EAAMrB,MACtCuB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,6BAAhB,WAKFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2CACVQ,QAAS,kBAAMb,EAAMZ,iBAAiBY,EAAMrB,GAAIqB,EAAMlB,SACzD8C,UCxCVY,8LAECzC,KAAKC,MAAMqB,MAAMU,OAAS,IAC3BhC,KAAKC,MAAMZ,iBAAiBW,KAAKC,MAAMqB,MAAM,GAAG1C,IAChDoB,KAAKC,MAAMX,oBAAoBU,KAAKC,MAAMqB,MAAM,GAAGvC,yCAI9C,IAAAgB,EAAAC,KACP,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACViC,IAAK,SAACG,GACJ3C,EAAK4C,OAASD,IAGjB1C,KAAKC,MAAMqB,MAAMsB,IAAI,SAAAC,GAAI,OACrB1C,EAAAC,EAAAC,cAACyC,EAAD,CACIC,IAAKF,EAAKjE,GACVA,GAAIiE,EAAKjE,GACTG,MAAO8D,EAAK9D,MACZ8C,cAAegB,EAAKhB,0BApBhBX,aAoCxB,IAeeC,cAtBf,SAAyBC,GACvB,MAAO,CACLE,MAAOF,EAAME,MACbpB,cAAekB,EAAMlB,gBAIE,SAACmB,GAC1B,MAAO,CACLhC,iBAAkB,SAACX,GACjB2C,EAAShC,EAAiB,CACxBX,WAAYA,MAGhBY,oBAAqB,SAACC,GACpB8B,EAAS/B,EAAoB,CAC3BC,cAAeA,QAMR4B,CAA6CsB,GCpDtDO,2LACK,IAAAjD,EAAAC,KACP,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAW,yBACdH,EAAAC,EAAAC,cAAA,OAAKS,QAAS,kBAAMf,EAAKE,MAAMc,0BAC1BT,UAAW,sBACXG,IAAKT,KAAKC,MAAMS,MAChBC,IAAI,GAAGC,MAAM,KAAKC,OAAO,eAPfK,cAgCVC,kBAlBf,SAAyBC,GACvB,MAAO,IAKT,SAA4BC,GAC1B,MAAO,CACLN,uBAAwB,WACtBM,EAASrC,EAAiB,CACxBE,sBAAsB,EACtBC,wBAAwB,EACxBC,yBAAyB,QAMlB+B,CAA6C6B,GChB7CC,EAhBK,SAAChD,GACnB,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UACdH,EAAAC,EAAAC,cAAC6C,EAAD,CACInE,MAAO,QACPiC,SAAU,gCACVN,MAAgC,wBAEpCP,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAC+C,EAAD,CACI1C,MAAgC,sBCK7B2C,wBAjBC,SAACpD,GAChB,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdH,EAAAC,EAAAC,cAAA,OAAKI,IAAKR,EAAMqD,gBAAiBhD,UAAU,qCAAqCK,IAAI,aACjF5B,MAAOkB,EAAMsD,WAAa,kBAE9BpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBL,EAAMuD,cAEvCrD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eCRZmD,+LAEFzD,KAAK2C,OAAOe,UAAY1D,KAAK2C,OAAOgB,8CAG7B,IAAA5D,EAAAC,KACP,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WACXiC,IAAK,SAACG,GAAS3C,EAAK4C,OAASD,IAC/B1C,KAAKC,MAAMuB,SAASM,OAAO,SAACC,GAAD,OACxBA,EAAEJ,SAAW5B,EAAKE,MAAMsB,SAAS7C,aAClCkE,IAAI,SAAAgB,GAAO,OACVzD,EAAAC,EAAAC,cAACwD,EAAD,CACIlC,OAAQiC,EAAQjC,OAChBoB,IAAKa,EAAQhF,GACb0E,gBAAiBM,EAAQE,QACzBN,YAAaI,EAAQnF,iBAhBZyC,aA+BZC,kBAPf,SAAyBC,GACxB,MAAO,CACNI,SAAUJ,EAAMI,SAChBD,SAAUH,EAAMG,WAIHJ,CAAyBsC,GC/BlCM,qNACJC,eAAiB,SAACC,GACC,UAAdA,EAAMlB,KACPhD,EAAKE,MAAMoC,IAAItC,EAAKmE,WAAYnE,EAAKE,MAAMsB,SAAS7C,qFAI/C,IAAAyF,EAAAnE,KACP,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,SAAO+D,WAAS,EACT7B,IAAK,SAACG,GAASyB,EAAKD,WAAaxB,GACjC2B,WAAarE,KAAKgE,eAClBrF,KAAK,OACL2B,UAAU,eACVgE,YAAY,6BACnBnE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKS,QAAS,kBAAMqD,EAAKlE,MAAMoC,IAAI8B,EAAKD,WAAYC,EAAKlE,MAAMsB,SAAS7C,aACnE4B,UAAU,iBAAiBK,IAAK,GAChCF,IAA8B,oCArB1BS,cA8CVC,kBAff,SAAyBC,GACvB,MAAO,CACPG,SAAUH,EAAMG,WAIlB,SAA4BF,GAC1B,MAAO,CACLgB,IAAK,SAACK,EAAIhE,GACR2C,EAAS7C,EAAWkE,EAAG6B,MAAO7F,IAC9BgE,EAAG6B,MAAQ,MAKFpD,CAA6C4C,GCvB7C5C,kBAPf,SAAyBC,GACxB,MAAO,CACNG,SAAUH,EAAMG,WAKHJ,CArBQ,SAAClB,GACvB,OACCE,EAAAC,EAAAC,cAAA,OAAKC,UAAW,eACfH,EAAAC,EAAAC,cAAC6C,EAAD,CACCnE,MAAOkB,EAAMsB,SAAShC,cACtByB,SAAU,6BACVN,MAAgC,wBAEjCP,EAAAC,EAAAC,cAACmE,EAAD,MACArE,EAAAC,EAAAC,cAACoE,EAAD,SCVGC,qNACJV,eAAiB,SAACC,GACC,UAAdA,EAAMlB,KACPhD,EAAKE,MAAMoC,IAAItC,EAAK4E,kFAIf,IAAAR,EAAAnE,KAGP,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,SAAO+D,WAAS,EACT7B,IAAK,SAAAC,GAAU2B,EAAKQ,QAAUnC,GAC9B6B,WAAarE,KAAKgE,eAClBrF,KAAK,OACL2B,UAAU,6BACVgE,YAAY,sBACnBnE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKS,QAAS,kBAAMqD,EAAKlE,MAAMoC,IAAI8B,EAAKQ,UAAUrE,UAAU,cAAcK,IAAK,GAC1EF,IAA8B,oCAtB7BS,cAkDPC,kBAnBf,SAAyBC,GACvB,MAAO,IAGT,SAA4BC,GAC1B,MAAO,CACLgB,IAAK,SAACK,GACJrB,EAASvC,EAAQ4D,EAAG6B,QACpB7B,EAAG6B,MAAQ,GAEXlD,EAASrC,EAAiB,CACxBE,sBAAsB,EACtBC,wBAAwB,EACxBC,yBAAyB,QAMlB+B,CAA6CuD,GCxC7CE,EAZO,SAAC3E,GACrB,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UACdH,EAAAC,EAAAC,cAAC6C,EAAD,CACInE,MAAO,kBACP2B,MAAgC,wBAEpCP,EAAAC,EAAAC,cAACwE,EAAD,QCJFC,mLAMF,OAFAC,QAAQC,IAAI,yDAA0D,oFAE/D7E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAGnBN,KAAKC,MAAMC,cAAchB,qBACpBiB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,gBACbH,EAAAC,EAAAC,cAAC4E,EAAD,OAEH,KAGLjF,KAAKC,MAAMC,cAAcf,uBACpBgB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBACdH,EAAAC,EAAAC,cAAC6E,EAAD,OAEF,KAGLlF,KAAKC,MAAMC,cAAcd,wBACpBe,EAAAC,EAAAC,cAAA,OAAKC,UAAW,qBACdH,EAAAC,EAAAC,cAAC8E,EAAD,OAEF,aA3BMjE,aA8CHC,kBAZf,SAAyBC,GACvB,MAAO,CACLlB,cAAekB,EAAMlB,gBAIzB,SAA4BmB,GAC1B,MAAO,IAKMF,CAA6C2D,GCzCxCM,QACW,cAA7BzF,OAAOC,SAASyF,UAEe,UAA7B1F,OAAOC,SAASyF,UAEhB1F,OAAOC,SAASyF,SAASC,MACvB,+ECjBAC,EACA,CACE,CACE3G,GAAM,OACN+C,OAAU,OACVmC,QAAW,+EACXrF,KAAQ,mTAEV,CACEG,GAAM,OACN+C,OAAU,OACVmC,QAAW,+EACXrF,KAAQ,+ZAEV,CACEG,GAAM,OACN+C,OAAU,OACVmC,QAAW,gFACXrF,KAAQ,01BAgCH+C,EAdE,WAAqC,IAApCJ,EAAoCoE,UAAAxD,OAAA,QAAAyD,IAAAD,UAAA,GAAAA,UAAA,GAA5BD,EAAiBG,EAAWF,UAAAxD,OAAA,EAAAwD,UAAA,QAAAC,EACpD,OAAQC,EAAO/G,MACb,IAAK,cACH,OAAOgH,OAAAC,EAAA,EAAAD,CACFvE,GADLyE,OAAA,CAjBU,SAACzE,EAAOsE,GACtB,OAAQA,EAAO/G,MACb,IAAK,cACH,MAAO,CACLC,GAAI8G,EAAO9G,GACXH,KAAMiH,EAAOjH,KACbkD,OAAQ+D,EAAOhH,WACfoF,QAAS,qEAEb,QACE,OAAO1C,GASLwC,MAAQ6B,EAAWC,KAEvB,IAAK,4BACH,OAAOtE,EAAMU,OAAO,SAAAC,GAAC,OAAIA,EAAEJ,SAAW+D,EAAO/D,SAC/C,QACE,OAAOP,YC/CP0E,EAAe,CACpB5G,sBAAsB,EACtBC,wBAAwB,EACxBC,yBAAyB,GAiBXc,EAdO,WAAkC,IAAjCkB,EAAiCoE,UAAAxD,OAAA,QAAAyD,IAAAD,UAAA,GAAAA,UAAA,GAAzBM,EAAcJ,EAAWF,UAAAxD,OAAA,EAAAwD,UAAA,QAAAC,EACtD,OAASC,EAAO/G,MAChB,IAAK,2BACD,OAAOgH,OAAAI,EAAA,EAAAJ,CAAA,GACHvE,EADJ,CAEFlC,qBAAsBwG,EAAOxG,qBAC7BC,uBAAwBuG,EAAOvG,uBAC/BC,wBAAyBsG,EAAOtG,0BAEhC,QACE,OAAOgC,ICfP4E,EACL,CACC,CACCpH,GAAM,OACNG,MAAS,4BACT8C,cAAiB,GAElB,CACCjD,GAAM,OACNG,MAAS,cACT8C,cAAiB,GAElB,CACCjD,GAAM,OACNG,MAAS,wBACT8C,cAAiB,IA+BLP,EAdD,WAAkC,IAAjCF,EAAiCoE,UAAAxD,OAAA,QAAAyD,IAAAD,UAAA,GAAAA,UAAA,GAAzBQ,EAAcN,EAAWF,UAAAxD,OAAA,EAAAwD,UAAA,QAAAC,EAC/C,OAAQC,EAAO/G,MACd,IAAK,WACJ,OAAOgH,OAAAC,EAAA,EAAAD,CACHvE,GADJyE,OAAA,CAhBU,SAACzE,EAAOsE,GACpB,OAAQA,EAAO/G,MACd,IAAK,WACJ,MAAO,CACNC,GAAI8G,EAAO9G,GACXG,MAAO2G,EAAO3G,MACd8C,cAAe,GAEjB,QACC,OAAOT,GASNyB,MAAK4C,EAAWC,KAElB,IAAK,cACJ,OAAOtE,EAAMU,OAAO,SAAAC,GAAC,OAAIA,EAAEnD,KAAO8G,EAAO9G,KAC1C,QACC,OAAOwC,IC3CJ0E,EAAe,CACpBpH,YAAa,EACba,cAAe,IAoBDgC,EAjBE,WAAkC,IAAjCH,EAAiCoE,UAAAxD,OAAA,QAAAyD,IAAAD,UAAA,GAAAA,UAAA,GAAzBM,EAAcJ,EAAWF,UAAAxD,OAAA,EAAAwD,UAAA,QAAAC,EAClD,OAASC,EAAO/G,MACf,IAAK,sBACJ,OAAOgH,OAAAI,EAAA,EAAAJ,CAAA,GACHvE,EADJ,CAEC1C,WAAYgH,EAAOhH,aAErB,IAAK,yBACJ,OAAAiH,OAAAI,EAAA,EAAAJ,CAAA,GACIvE,EADJ,CAEC7B,cAAemG,EAAOnG,gBAExB,QACC,OAAO6B,ICLK6E,EAPDC,YAAgB,CAC5B1E,WACAtB,gBACAoB,QACDC,8BCCK4E,EACgB,kBAAXxG,QACPA,OAAOyG,qCACHzG,OAAOyG,qCAAqC,IAEvCC,IAEPC,EClBmB,WACvB,IACE,IAAMC,EAAkB9G,aAAa+G,QAAQ,SAC7C,GAAuB,OAApBD,EACD,OAEF,OAAOE,KAAKC,MAAMH,GAClB,MAAOI,GACP,QDUmBC,GAEjBC,GAAQC,YACVC,EACAT,EACAH,KAGJU,GAAMG,UAAUC,IAAS,YCdA,SAAC7F,GAExB,IACE,IAAMmF,EAAkBE,KAAKS,UAAU9F,GACvC3B,aAAa0H,QAAQ,QAASZ,GAC9B,MAAOI,KDUTS,CAAUP,GAAMQ,aACf,MAGH,IAAMC,GACFnH,EAAAC,EAAAC,cAACkH,EAAA,EAAD,CAAUV,MAAOA,IACf1G,EAAAC,EAAAC,cAACmH,EAAD,OAINC,IAASC,OAAOJ,GAAKK,SAASC,eAAe,SN4FvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.06737351.chunk.js","sourcesContent":["import { v4 } from 'node-uuid'\r\n\r\nexport const addComment = (text, currPostId) => ({\r\n\ttype: 'ADD_COMMENT',\r\n\tid: v4(),\r\n\ttext,\r\n\tcurrPostId\r\n});\r\n\r\nexport const addPost = (title) => ({\r\n\ttype: 'ADD_POST',\r\n\tid: v4(),\r\n\ttitle\r\n});\r\n\r\n\r\nexport const screenVisibility = (choice) => ({\r\n  type: 'CHANGE_SCREEN_VISIBILITY',\r\n  PostsScreenIsVisible: choice.PostsScreenIsVisible,\r\n  PostAddScreenIsVisible: choice.PostAddScreenIsVisible,\r\n  CommentsScreenIsVisible: choice.CommentsScreenIsVisible\r\n});\r\n\r\nexport const changeCurrPostId = (choice) => ({\r\n\ttype: 'CHANGE_CURR_POST_ID',\r\n\tcurrPostId: choice,\r\n});\r\n\r\nexport const changeCurrPostTitle = (choice) => ({\r\n  type: 'CHANGE_CURR_POST_TITLE',\r\n  currPostTitle: choice,\r\n});\r\n\r\nexport const deletePost = (id) => ({\r\n  type: 'DELETE_POST',\r\n  id\r\n});\r\n\r\nexport const deleteCommentsByPostId = (postId) => ({\r\n  type: 'DELETE_COMMENTS_BY_POSTID',\r\n  postId\r\n});\r\n","import React, {Component} from 'react'\r\nimport './Header.css';\r\nimport {connect} from 'react-redux'\r\nimport {screenVisibility} from \"../../actions\";\r\n\r\nclass Header extends Component {\r\n  _refreshPage() {\r\n    localStorage.removeItem('state');\r\n    window.location.reload();\r\n  }\r\n\r\n  render() {\r\n    let curScreen;\r\n    switch (true) {\r\n      case (this.props.visibleScreen.PostsScreenIsVisible):\r\n        curScreen = \"postList\";\r\n        break;\r\n      case (this.props.visibleScreen.CommentsScreenIsVisible):\r\n        curScreen = \"commentsList\";\r\n        break;\r\n      case (this.props.visibleScreen.PostAddScreenIsVisible):\r\n        curScreen = \"postAdd\";\r\n        break;\r\n      default:\r\n        curScreen = \"postList\";\r\n    }\r\n\r\n    return (\r\n        <div className={'Header'}>\r\n          <div className={'row col-xs-12'} style={{'display': 'contents'}}>\r\n\r\n            <div className={'row col-xs-10'} style={{'display': 'contents'}}>\r\n              <div className={'Header-img__place ' + curScreen}>\r\n                {/*(this.props.visibleScreen.PostsScreenIsVisible ? 'hidden' : '')*/}\r\n\r\n                <img className={'Header-img_icon'}\r\n\r\n                     src={this.props.image}\r\n                     alt=\"\" width=\"40\" height=\"40\"\r\n                     onClick={() => this.props.changeScreenVisibility()}\r\n                />\r\n              </div>\r\n\r\n              <div className={'Header-top__title'}>\r\n                <h2 className={curScreen}> {this.props.title} </h2>\r\n                {/*{this.props.visibleScreen.PostsScreenIsVisible ? 'bigger' : ''}*/}\r\n                <div>\r\n              <span\r\n                  className={curScreen}>{this.props.subTitle}</span>\r\n                  {/*{this.props.visibleScreen.PostsScreenIsVisible ? 'bigger' : ''}>*/}\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className={'row col-xs-2'}\r\n                 onClick= {this._refreshPage}>\r\n              <div className=\"Avatar Avatar--success\">\r\n                <img style={{'height':'auto','width':'80px'}} src=\"https://cdn.iconscout.com/icon/free/png-256/avatar-375-456327.png\" alt=\"\"/>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n    );\r\n  }\r\n\r\n\r\n\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    visibleScreen: state.visibleScreen\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    changeScreenVisibility: () => {\r\n      dispatch(screenVisibility({\r\n        PostsScreenIsVisible: true,\r\n        PostAddScreenIsVisible: false,\r\n        CommentsScreenIsVisible: false\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n\r\n","import React from 'react'\r\nimport './Post.css';\r\nimport {connect} from 'react-redux'\r\nimport {deleteCommentsByPostId,deletePost, changeCurrPostId, changeCurrPostTitle, screenVisibility} from '../../actions';\r\n\r\nconst Post = (props) => {\r\n\r\n  let elPostDelPlace;\r\n  let commentsCount = props.comments.filter((c) => (\r\n      c.postId === props.id\r\n  )).length;\r\n\r\n  const mouseOut = () => {\r\n    elPostDelPlace.classList.add('invisible');\r\n  };\r\n\r\n  const mouseOver = () => {\r\n    elPostDelPlace.classList.remove('invisible');\r\n  };\r\n\r\n  return (\r\n      <div className='Post'>\r\n        <div className='row-mod'\r\n             onMouseOut={() => mouseOut()}\r\n             onMouseOver={() => mouseOver()}>\r\n\r\n          <div className='input-group col-xs-12'>\r\n            <div className='Post__title col-xs-8'\r\n                 onClick={() => mouseOver()}\r\n            >{props.title}\r\n            </div>\r\n\r\n            <div ref={node => {\r\n              return (elPostDelPlace = node);\r\n            }}\r\n                 className='Post-del__place col-xs-2 invisible'\r\n                 onClick={() => props.delPost(props.id)}>\r\n              <span className='Post__title Post-del__btn'>\r\n                Delete\r\n              </span>\r\n            </div>\r\n\r\n            <div className='Post-counter__place col-xs-1'>\r\n\r\n              <div className='input-group Post__commentsCount noselect'\r\n                   onClick={() => props.changeCurrPostId(props.id, props.title)}\r\n              >{commentsCount}</div>\r\n\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.posts,\r\n    visibleScreen: state.visibleScreen,\r\n    settings: state.settings,\r\n    comments: state.comments\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    changeCurrPostId: (currPostId, currPostTitle) => {\r\n      dispatch(changeCurrPostId(currPostId));\r\n      dispatch(changeCurrPostTitle(currPostTitle));\r\n      dispatch(screenVisibility({\r\n        PostsScreenIsVisible: false,\r\n        PostAddScreenIsVisible: false,\r\n        CommentsScreenIsVisible: true,\r\n      }));\r\n    },\r\n    delPost: (id) =>{\r\n      dispatch(deletePost(id));\r\n      dispatch(deleteCommentsByPostId(id));\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post);","import React, {Component} from 'react'\r\nimport './PostsList.css';\r\nimport {connect} from 'react-redux'\r\nimport Post from '../Post/Post'\r\nimport {changeCurrPostId, changeCurrPostTitle} from \"../../actions\";\r\n\r\nclass PostsList extends Component {\r\n  componentDidMount() {\r\n    if(this.props.posts.length > 0){\r\n      this.props.changeCurrPostId(this.props.posts[0].id)\r\n      this.props.changeCurrPostTitle(this.props.posts[0].title)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"list row\"\r\n             ref={(el) => {\r\n               this.listEl = el;\r\n             }}>\r\n          {\r\n            this.props.posts.map(post =>\r\n                <Post\r\n                    key={post.id}\r\n                    id={post.id}\r\n                    title={post.title}\r\n                    commentsCount={post.commentsCount}\r\n                />\r\n            )\r\n          }\r\n        </div>\r\n    );\r\n  }\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    posts: state.posts,\r\n    visibleScreen: state.visibleScreen\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    changeCurrPostId: (currPostId) => {\r\n      dispatch(changeCurrPostId({\r\n        currPostId: currPostId\r\n      }));\r\n    },\r\n    changeCurrPostTitle: (currPostTitle) => {\r\n      dispatch(changeCurrPostTitle({\r\n        currPostTitle: currPostTitle\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsList);","import React, {Component} from 'react'\r\nimport './PlusButton.css'\r\nimport {connect} from 'react-redux'\r\nimport {screenVisibility} from \"../../actions\";\r\n\r\nclass PlusButton extends Component {\r\n  render() {\r\n    return (\r\n        <div className={'PlusButton-img__place'}>\r\n          <img onClick={() => this.props.changeScreenVisibility()}\r\n               className={'PlusButton-img_icon'}\r\n               src={this.props.image}\r\n               alt=\"\" width=\"40\" height=\"40\"/>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    changeScreenVisibility: () => {\r\n      dispatch(screenVisibility({\r\n        PostsScreenIsVisible: false,\r\n        PostAddScreenIsVisible: true,\r\n        CommentsScreenIsVisible: false\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlusButton)","import React from 'react';\r\nimport Header from '../../components/Header/Header'\r\nimport PostsList from \"../../components/PostsList/PostsList\";\r\nimport PlusButton from '../../containers/PlusButton/PlusButton'\r\n\r\nconst PostsScreen = (props) => {\r\n  return (\r\n      <div className={'screen'}>\r\n        <Header\r\n            title={'Sayer'}\r\n            subTitle={'World\\'s most used time waster'}\r\n            image={process.env.PUBLIC_URL + '/image/arr-left.png'}\r\n        />\r\n        <PostsList/>\r\n        <PlusButton\r\n            image={process.env.PUBLIC_URL + '/image/plus.png'}\r\n        />\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default PostsScreen","import React from 'react';\r\nimport './Comment.css';\r\n\r\nconst Comment = (props) => {\r\n\treturn (\r\n\t\t\t<div className=\"Comments\">\r\n\t\t\t\t<div className=\"media-left\">\r\n\t\t\t\t\t<img src={props.commentIconPath} className=\"Comments__icon media-object avatar\" alt=\"not loaded\"\r\n\t\t\t\t\t\t\t title={props.titleText || \"< stranger >\"}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"media-body\">\r\n\t\t\t\t\t<h6 className=\"Comments__text\">{props.commentText}</h6>\r\n\t\t\t\t</div>\r\n\t\t\t\t<hr className=\"divider\"/>\r\n\t\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\n\r\nexport default Comment","import React, {Component} from 'react';\r\nimport './CommentsList.css';\r\nimport {connect} from 'react-redux'\r\nimport Comment from '../Comment/Comment'\r\n\r\nclass CommentsList extends Component {\r\n  componentDidUpdate() {\r\n    this.listEl.scrollTop = this.listEl.scrollHeight;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className={'list row'}\r\n             ref={(el) => { this.listEl = el; }}>\r\n          {this.props.comments.filter((c) => (\r\n              c.postId === this.props.settings.currPostId\r\n          )).map(comment =>\r\n              <Comment\r\n                  postId={comment.postId}\r\n                  key={comment.id}\r\n                  commentIconPath={comment.userPic}\r\n                  commentText={comment.text}\r\n              />\r\n          )}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tcomments: state.comments,\r\n\t\tsettings: state.settings\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps)(CommentsList)","import React, {Component} from 'react';\r\nimport './CommentAdd.css';\r\nimport {connect} from 'react-redux'\r\nimport {addComment} from '../../actions'\r\n\r\nclass CommentAdd extends Component {\r\n  handleKeyPress = (event) => {\r\n    if(event.key === 'Enter'){\r\n      this.props.add(this.newComment, this.props.settings.currPostId);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"CommentAdd row\">\r\n          <div className=\"col-xs-12\">\r\n            <div className=\"input-group input-group-lg\">\r\n              <input autoFocus\r\n                     ref={(el) => { this.newComment = el; }}\r\n                     onKeyPress={ this.handleKeyPress }\r\n                     type=\"text\"\r\n                     className=\"form-control\"\r\n                     placeholder=\"New comment goes here...\"/>\r\n              <div className=\"input-group-btn\">\r\n                <img onClick={() => this.props.add(this.newComment, this.props.settings.currPostId)}\r\n                     className=\"CommentAdd-add\" alt={\"\"}\r\n                     src={process.env.PUBLIC_URL + '/image/arr-right.png'}/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n\t\tsettings: state.settings\r\n\t}\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    add: (el, currPostId) => {\r\n      dispatch(addComment(el.value, currPostId));\r\n      el.value = '';\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentAdd)","import React from 'react';\r\nimport './CommentsScreen.css'\r\nimport Header from '../../components/Header/Header'\r\nimport CommentsList from '../../components/CommentsList/CommentsList'\r\nimport CommentAdd from '../../containers/CommentAdd/CommentAdd'\r\nimport {connect} from 'react-redux'\r\n\r\nconst CommentsScreen = (props) => {\r\n\treturn (\r\n\t\t<div className={'screen gray'}>\r\n\t\t\t<Header\r\n\t\t\t\ttitle={props.settings.currPostTitle}\r\n\t\t\t\tsubTitle={'Lorem ipsum dolor sit amet'}\r\n\t\t\t\timage={process.env.PUBLIC_URL + '/image/arr-left.png'}\r\n\t\t\t/>\r\n\t\t\t<CommentsList/>\r\n\t\t\t<CommentAdd/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tsettings: state.settings,\r\n\t}\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(CommentsScreen)","import React, {Component} from 'react';\r\nimport './PostAdd.css';\r\nimport {connect} from 'react-redux'\r\nimport {addPost} from '../../actions'\r\nimport {screenVisibility} from \"../../actions\";\r\n\r\nclass PostAdd extends Component {\r\n  handleKeyPress = (event) => {\r\n    if(event.key === 'Enter'){\r\n      this.props.add(this.newPost);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let input;\r\n\r\n    return (\r\n        <div className=\"PostAdd row\">\r\n          <div className=\"col-xs-12\">\r\n            <div className=\"input-group input-group-lg\">\r\n              <input autoFocus\r\n                     ref={node => { this.newPost = node }}\r\n                     onKeyPress={ this.handleKeyPress }\r\n                     type=\"text\"\r\n                     className=\"form-control PostAdd-input\"\r\n                     placeholder=\"New item title...\"/>\r\n              <div className=\"input-group-btn\">\r\n                <img onClick={() => this.props.add(this.newPost)} className=\"PostAdd-add\" alt={\"\"}\r\n                     src={process.env.PUBLIC_URL + '/image/arr-right.png'}/>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {}\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    add: (el) => {\r\n      dispatch(addPost(el.value));\r\n      el.value = '';\r\n      // Aaaa111!!! - have to refactor\r\n      dispatch(screenVisibility({\r\n        PostsScreenIsVisible: true,\r\n        PostAddScreenIsVisible: false,\r\n        CommentsScreenIsVisible: false\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostAdd)","import React from 'react';\r\nimport Header from '../../components/Header/Header'\r\nimport PostAdd from '../../containers/PostAdd/PostAdd'\r\n\r\nconst PostAddScreen = (props) => {\r\n  return (\r\n      <div className={'screen'}>\r\n        <Header\r\n            title={'Create new item'}\r\n            image={process.env.PUBLIC_URL + '/image/arr-left.png'}\r\n        />\r\n        <PostAdd/>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default PostAddScreen","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport PostsScreen from './components/Screens/PostsScreen'\r\nimport CommentsScreen from './components/Screens/CommentsScreen'\r\nimport PostAddScreen from './components/Screens/PostAddScreen'\r\nimport {connect} from 'react-redux'\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n\r\n    console.log(\"\\n%c To clean the Store please click on the User Icon \", \"background-color: #000; color: #53f802; font-size:24px; font-variant: small-caps\")\r\n\r\n    return <div className=\"container\">\r\n\r\n\r\n      {this.props.visibleScreen.PostsScreenIsVisible\r\n          ? <div className={'Screen-Posts'}>\r\n               <PostsScreen />\r\n            </div>\r\n          : null\r\n      }\r\n\r\n      {this.props.visibleScreen.PostAddScreenIsVisible\r\n          ? <div className={'Screen-AddPost'}>\r\n              <PostAddScreen />\r\n            </div>\r\n          : null\r\n      }\r\n\r\n      {this.props.visibleScreen.CommentsScreenIsVisible\r\n          ? <div className={'Screen-AddComment'}>\r\n              <CommentsScreen />\r\n          </div>\r\n          : null\r\n      }\r\n\r\n    </div>;\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    visibleScreen: state.visibleScreen\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","\r\nconst initialComments =\r\n      [\r\n        {\r\n          \"id\": \"asdf\",\r\n          \"postId\": \"aaaa\",\r\n          \"userPic\": \"http://icons.iconarchive.com/icons/webalys/kameleon.pics/256/Man-16-icon.png\",\r\n          \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse tristique luctus enim, sed elementum neque venenatis in. Nullam lobortis ex a lectus blandit malesuada. Nam ac felis id dolor pharetra rutrum. Cras vitae fermentum ex. Vivamus aliquam egestas orci, sed porttitor nisi malesuada rutrum.\"\r\n        },\r\n        {\r\n          \"id\": \"qwer\",\r\n          \"postId\": \"aaaa\",\r\n          \"userPic\": \"http://icons.iconarchive.com/icons/webalys/kameleon.pics/256/Boss-5-icon.png\",\r\n          \"text\": \"Maecenas eu sagittis tellus. Nam facilisis felis quis tellus eleifend congue. Aliquam feugiat velit leo, vitae faucibus arcu eleifend a. Proin in odio erat. Pellentesque vel justo malesuada ante pulvinar malesuada a quis lorem. Donec magna dui, egestas eu tincidunt vel, lacinia cursus nibh. Integer non nulla eget diam varius rhoncus nec at tellus. Nam porttitor condimentum diam, eu porta mauris finibus eget.\"\r\n        },\r\n        {\r\n          \"id\": \"zxcv\",\r\n          \"postId\": \"bbbb\",\r\n          \"userPic\": \"http://icons.iconarchive.com/icons/webalys/kameleon.pics/256/Woman-9-icon.png\",\r\n          \"text\": \"Suspendisse at erat tincidunt nunc euismod lobortis et et urna. Ut nulla tellus, eleifend vitae ultrices nec, fringilla et ex. Integer a odio eu velit dignissim ullamcorper. Praesent nec laoreet turpis, ut efficitur felis. Donec sodales sit amet tellus nec dictum. Donec quis sollicitudin nisi. Vivamus risus ex, rutrum eu venenatis id, egestas eu mi. Aliquam massa ligula, scelerisque vel nisl non, venenatis fringilla dui. Suspendisse vitae tincidunt mi. Morbi congue, tellus in fermentum ornare, elit justo ultrices lorem, eget bibendum nunc enim a lorem. Cras hendrerit non ipsum non fermentum. Nunc bibendum turpis mauris, vitae malesuada lorem posuere in. Mauris congue purus nulla, non pharetra lectus venenatis at. Fusce ultricies lobortis purus eu gravida. Proin pellentesque nec ante eget euismod. Nullam ultrices quis nisi sit amet porttitor.\"\r\n        }\r\n      ]\r\n\r\nconst comment = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_COMMENT':\r\n      return {\r\n        id: action.id,\r\n        text: action.text,\r\n        postId: action.currPostId,\r\n        userPic: \"https://cdn.iconscout.com/icon/free/png-256/avatar-375-456327.png\"\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst comments = (state = initialComments, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_COMMENT':\r\n      return [\r\n        ...state,\r\n        comment(undefined, action)\r\n      ]\r\n    case 'DELETE_COMMENTS_BY_POSTID':\r\n      return state.filter(c => c.postId !== action.postId);\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default comments","const initialState = {\r\n\tPostsScreenIsVisible: true,\r\n\tPostAddScreenIsVisible: false,\r\n\tCommentsScreenIsVisible: false\r\n}\r\n\r\nconst visibleScreen = (state = initialState, action) => {\r\n  switch ( action.type ) {\r\n\t\tcase 'CHANGE_SCREEN_VISIBILITY':\r\n      return {\r\n      \t...state,\r\n\t\t\t\tPostsScreenIsVisible: action.PostsScreenIsVisible,\r\n\t\t\t\tPostAddScreenIsVisible: action.PostAddScreenIsVisible,\r\n\t\t\t\tCommentsScreenIsVisible: action.CommentsScreenIsVisible\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default visibleScreen","\r\nconst initialPosts =\r\n\t[\r\n\t\t{\r\n\t\t\t\"id\": \"aaaa\",\r\n\t\t\t\"title\": \"First item with customize\",\r\n\t\t\t\"commentsCount\": 3\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": \"bbbb\",\r\n\t\t\t\"title\": \"Second Item\",\r\n\t\t\t\"commentsCount\": 0\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"id\": \"cccc\",\r\n\t\t\t\"title\": \"Third Item(short one)\",\r\n\t\t\t\"commentsCount\": 0\r\n\t\t}\r\n\t];\r\n\r\nconst post = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'ADD_POST':\r\n\t\t\treturn {\r\n\t\t\t\tid: action.id,\r\n\t\t\t\ttitle: action.title,\r\n\t\t\t\tcommentsCount: 0\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nconst posts = (state = initialPosts, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'ADD_POST':\r\n\t\t\treturn [\r\n\t\t\t\t...state,\r\n\t\t\t\tpost(undefined, action)\r\n\t\t\t]\r\n\t\tcase 'DELETE_POST':\r\n\t\t\treturn state.filter(c => c.id !== action.id);\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default posts","const initialState = {\r\n\tcurrPostId: -1,\r\n\tcurrPostTitle: ''\r\n}\r\n\r\nconst settings = (state = initialState, action) => {\r\n\tswitch ( action.type ) {\r\n\t\tcase 'CHANGE_CURR_POST_ID':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcurrPostId: action.currPostId\r\n\t\t\t}\r\n\t\tcase 'CHANGE_CURR_POST_TITLE':\r\n\t\t\treturn{\r\n\t\t\t\t...state,\r\n\t\t\t\tcurrPostTitle: action.currPostTitle\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default settings","import { combineReducers } from 'redux'\r\nimport comments from './comments'\r\nimport visibleScreen from './visibleScreen'\r\nimport posts from './posts'\r\nimport settings from './settings'\r\n\r\nconst sayer = combineReducers({\r\n  comments,\r\n  visibleScreen,\r\n  posts,\r\n\tsettings\r\n})\r\n\r\nexport default sayer\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, compose } from 'redux'\r\nimport { Provider } from 'react-redux'\r\nimport { loadState, saveState } from './localStorage'\r\nimport reducer from './reducers'\r\nimport throttle from 'lodash/throttle'\r\n\r\nconst composeEnhancers =\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n          // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n        }) : compose;\r\n\r\nconst persistedState = loadState()\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    persistedState,\r\n    composeEnhancers(),\r\n);\r\n\r\nstore.subscribe(throttle(() => {\r\n  saveState(store.getState());\r\n}, 1000 ));\r\n\r\n\r\nconst app = (\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state');\r\n    if(serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state) => {\r\n  //delete state.visibleScreen; // should we save screenvisibility?\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('state', serializedState)\r\n  } catch (err) {\r\n    // ----\r\n  }\r\n}\r\n\r\n"],"sourceRoot":""}